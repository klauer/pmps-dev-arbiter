<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PMPS_Arbiter" Id="{91ae890b-11cc-4d41-83ec-edc5b802c784}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PMPS_Arbiter
VAR
    
	fbBPRequestor : FB_BPRequestor; // Updates global PMPS RequestedBeamParams
    
	fbPhotonEnergyWatcher	:	FB_PhotonEnergyWatcher;
	{attribute 'pytmc' := '
    pv: @(PREFIX)BeamClassOutputs
    '}
	fbMPSInterface	:	FB_BeamClassOutputs;
    {attribute 'pytmc' := '
    pv: @(PREFIX)CuRateOutputs
    '}
    fbCuInterface	:	FB_CTLS_Outputs;
	
	(* Subsystem requests use this FB and a pragma link to pass their requests to the arbiter.
	The fb is called on each cycle and updates the arbiter with the current BP set requested 
	from the subsystem PLC.*)
	//<TODO> make this so it does input and output to the IF
    {attribute 'pytmc' := '
    pv: @(PREFIX)SubSysIO:PLC1
    '}
	{attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[SubSysPLC1]^IO Inputs^RequestedBP; 
                                .o_CurrentBP:=TIIB[SubSysPLC1]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[SubSysPLC1]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[SubSysPLC1]^WcState^WcState;
                                .i_TxPDOState:=TIIB[SubSysPLC1]^SYNC Inputs^TxPDO state;
                                '}
	fbSubSys1_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF0F);
    
	{attribute 'pytmc' := '
    pv: @(PREFIX)SubSysIO:PLC2
    '}
	{attribute 'TcLinkTo' := '.i_RequestedBP:=TIIB[SubSysPLC2]^IO Inputs^RequestedBP;
                                .i_xNewRequest:=TIIB[SubSysPLC2]^IO Inputs^xNewRequest; 
                                .o_CurrentBP:=TIIB[SubSysPLC2]^IO Outputs^CurrentBP;
                                .i_Connected:=TIIB[SubSysPLC2]^SYNC Inputs^External device not connected;
                                .i_WcState:=TIIB[SubSysPLC2]^WcState^WcState;
                                .i_TxPDOState:=TIIB[SubSysPLC2]^SYNC Inputs^TxPDO state;
                                .i_TxPDOToggle:=TIIB[SubSysPLC2]^SYNC Inputs^TxPDO toggle;
                                '}
	fbSubSys2_PMPS_IO : FB_ArbiterToSubSys_IO := (RequestingSystemID := 16#FF10);
    
    
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Updating arbiter with subsystem requests.
fbSubSys1_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset);

fbSubSys2_PMPS_IO(Arbiter:=GVL.g_fbArbiter1, fbFFHWO:=GVL.g_FastFaultOutput1, Reset:=GVL.AttemptReset);

// Example with attenuator peel-off
//////////////////////////////////

// Beam parameter requestor
fbBPRequestor(Arbiter:=GVL.g_fbArbiter1, q_ReqBP => PMPS_GVL.stRequestedBeamParameters);

// Request beam class
fbMPSInterface(BP := PMPS_GVL.stRequestedBeamParameters);

// Request Cu beam rate
fbCuInterface(BP := PMPS_GVL.stRequestedBeamParameters);


// Keep an eye on the photon energy
fbPhotonEnergyWatcher(i_stCurrentBeamParams	:= PMPS_GVL.stCurrentBeamParameters,
					i_stRequestedBeamParams := PMPS_GVL.stRequestedBeamParameters,
					io_fbFFHWO:= GVL.g_FastFaultOutput1,
                    i_xReset := GVL.AttemptReset);

// Evaluate fast fault vetos
g_FastFaultOutput1.EvaluateVetos();

// Send fast fault logs
g_FastFaultOutput1.ExecuteLogging();
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>